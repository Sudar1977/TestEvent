using System;
using System.Collections.Generic;
using System.Text;

//Добавление методов в делегат
//В примерах выше переменная делегата указывала на один метод.
//В реальности же делегат может указывать на множество методов,
//которые имеют ту же сигнатуру и возвращаемые тип.
//Все методы в делегате попадают в специальный список - список вызова или invocation list.
//И при вызове делегата все методы из этого списка последовательно вызываются.
//И мы можем добавлять в этот спиок не один, а несколько методов:


namespace TestDelegate
{
    class Example03_Messages
    {
        delegate void Message();
        public Example03_Messages()
        {
            //В данном случае в список вызова делегата mes1 добавляются два метода - Hello и HowAreYou.
            //И при вызове mes1 вызываются сразу оба этих метода.
            Message mes1 = Hello;
            //Для добавления делегатов применяется операция +=.
            //Однако стоит отметить, что в реальности будет происходить создание нового объекта делегата,
            //который получит методы старой копии делегата и новый метод, и новый созданный объект делеагата
            //будет присвоен переменной mes1.
            mes1 += HowAreYou;  // теперь mes1 указывает на два метода
            //При добавлении делегатов следует учитывать, что мы можем добавить ссылку на один и
            //тот же метод несколько раз, и в списке вызова делегата тогда будет несколько ссылок
            //на один и то же метод. Соответственно при вызове делегата добавленный метод будет
            //вызываться столько раз, сколько он был добавлен:
            mes1 += Hello;
            mes1 += Hello;
            mes1(); // вызываются оба метода - Hello и HowAreYou
            //При удалении методов из делегата фактически будет создаватья новый делегат,
            //который в списке вызова методов будет содержать на один метод меньше.
            mes1 -= HowAreYou;  // удаляем метод HowAreYou
            Console.WriteLine("==================================");
            mes1(); // вызывается метод Hello
            //При удалении следует учитывать, что если делегат содержит несколько ссылок
            //на один и тот же метод, то операция -= начинает поиск с конца списка вызова делегата
            //и удаляет только первое найденное вхождение.
            //Если подобного метода в списке вызова делегата нет,
            //то операция -= не имеет никакого эффекта.
            mes1 -= HowAreYou;  // удаляем метод HowAreYou
            Console.WriteLine("==================================");
            mes1(); // вызывается метод Hello
            //Объединение делегатов
            //Делегаты можно объединять в другие делегаты. Например:
            Message mes2 = Hello;
            Message mes3 = HowAreYou;
            //В данном случае объект mes3 представляет объединение делегатов mes1 и mes2.
            //Объединение делегатов значит, что в список вызова делегата mes3 попадут
            //все методы из делегатов mes1 и mes2.
            //И при вызове делегата mes3 все эти методы одновременно будут вызваны.
            Message mes4 = mes2 + mes3; // объединяем делегаты
            Console.WriteLine("==================================");
            mes4(); // вызываются все методы из mes1 и mes2
            //Есть ли возможность получить список методов в делегате и сортировать их?
            int delTotal = mes4?.GetInvocationList()?.Length ?? 0;
            Console.WriteLine($"Всего {delTotal} методов в делегате");
            if (delTotal > 0)
                foreach (Delegate d in mes4.GetInvocationList())
                    Console.WriteLine(d.Method);

        }
        private void Hello()
        {
            Console.WriteLine("Hello");
        }
        private void HowAreYou()
        {
            Console.WriteLine("How are you?");
        }
    }
}
