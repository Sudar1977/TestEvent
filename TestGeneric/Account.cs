namespace TestGeneric
{

    //Посмотрим на примере.Допустим, мы определяем класс для представления банковского счета.
    //К примеру, он мог бы выглядеть следующим образом:
    class Account
    {
        //Класс Account определяет два свойства: Id - уникальный идентификатор и Sum - сумму на счете.
        //Здесь идентификатор задан как числовое значение, то есть банковские счета будут иметь значения
        //1, 2, 3, 4 и так далее.Однако также нередко для идентификатора используются и строковые значения.
        //И у числовых, и у строковых значений есть свои плюсы и минусы.
        //И на момент написания класса мы можем точно не знать,
        //что лучше выбрать для хранения идентификатора - строки или числа.Либо, возможно,
        //этот класс будет использоваться другими разработчиками,
        //которые могут иметь свое мнение по данной проблеме.
        public int IdOld { get; set; }
        //И на первый взгляд, чтобы выйти из подобной ситуации, мы можем определить свойство Id как свойство
        //типа object. Так как тип object является универсальным типом, от которого наследуется все типы,
        //соответственно в свойствах подобного типа мы можем сохранить и строки, и числа:
        public object Id { get; set; }
        public int Sum { get; set; }
    }
}
